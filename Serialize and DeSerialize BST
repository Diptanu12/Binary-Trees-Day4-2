Serialize and DeSerialize BST
Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Your task is to complete the function serialize, which stores the binary search tree into an array A[], and deSerialize, which deserializes the array to the binary search tree and returns it.

Note

The structure of the tree must be maintained. Multiple nodes can have the same data.

Input Format
Input is managed for you. (The input given in the example is the preorder traversal of BST)

Output Format
Output is managed for you.

Example 1
Input

9
4 3 2 -1 -1 -1 5 -1 -1
Output

3 -> 4 <- 5
2 -> 3 <- .
. -> 2 <- .
. -> 5 <- .
Explanation

You need to complete the function. Input and Output are handled by driver code.

Example 2
Input

13
7 3 2 -1 -1 5 -1 -1 10 -1 12 -1 -1
Output

3 -> 7 <- 10
2 -> 3 <- 5
. -> 2 <- .
. -> 5 <- .
. -> 10 <- 12
. -> 12 <- .
Explanation

You need to complete the function. Input and Output are handled by driver code.

Constraints
0 <= Number of Nodes <= 10^4

1 <= value of Node data <= 10000

Topics


import java.util.*;

public class Main {
    public static Scanner scn = new Scanner(System.in);

    public static class TreeNode {
        int val = 0;
        TreeNode left = null;
        TreeNode right = null;

        TreeNode(int val) {
            this.val = val;
        }
    }

    private static void traversal(TreeNode node, StringBuilder sb) {
        if (node == null) {
            sb.append("null,");
            return;
        }

        sb.append(node.val);
        sb.append(",");

        traversal(node.left, sb);
        traversal(node.right, sb);
    }

    // Encodes a tree to a single string.
    public static String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder("");
        traversal(root, sb);

        return sb.toString();
    }

    static int itr = 0;

    static TreeNode construct(String[] strArr) {
        if (itr > strArr.length) {
            return null;
        }

        if (strArr[itr].equals("null") == true) {
            itr++;
            return null;
        } else {
            int val = Integer.parseInt(strArr[itr]);
            TreeNode root = new TreeNode(val);

            itr++;

            root.left = construct(strArr);
            root.right = construct(strArr);

            return root;
        }
    }

    // Decodes your encoded data to tree.
    public static TreeNode deserialize(String str) {
        String[] strArr = str.split(",");

        return construct(strArr);
    }

    // input_section=================================================

    public static void display(TreeNode node) {
        if (node == null)
            return;

        StringBuilder sb = new StringBuilder();
        sb.append((node.left != null ? node.left.val : "."));
        sb.append(" -> " + node.val + " <- ");
        sb.append((node.right != null ? node.right.val : "."));

        System.out.println(sb.toString());

        display(node.left);
        display(node.right);

    }

    public static TreeNode createTree(int[] arr, int[] IDX) {
        if (IDX[0] > arr.length || arr[IDX[0]] == -1) {
            IDX[0]++;
            return null;
        }
        TreeNode node = new TreeNode(arr[IDX[0]++]);
        node.left = createTree(arr, IDX);
        node.right = createTree(arr, IDX);

        return node;
    }

    public static void solve() {
        int n = scn.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++)
            arr[i] = scn.nextInt();

        int[] IDX = new int[1];
        TreeNode root = createTree(arr, IDX);

        String s = serialize(root);
        display(deserialize(s));
    }

    public static void main(String[] args) {
        solve();
    }
}
